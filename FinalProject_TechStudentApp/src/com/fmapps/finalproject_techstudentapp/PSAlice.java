package com.fmapps.finalproject_techstudentapp;




import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;


public class PSAlice extends ListActivity {
	Intent i;
	final int result = 1;
	
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
		ListView listView = getListView();
		listView.setBackgroundResource(R.drawable.background);
		 //contentText = (TextView)findViewById(R.id.txtContent);
		
		i = new Intent(this,CourseContent.class);
		
		String [] chapterList = {"Chapter 1-3", "Chapter 4", 
				"Chapter 5", "Chapter 6", "Chapter 7", "Chapter 8"}; 
		/* future updates:
		"Networking Fundamentals", "Web Programming I", "C++ Programming I", "System Administration (Windows)", 
		"Introduction to Systems Analysis and Design", "Web Programming II", "System Administration (Linux)", 
		"C++ Programming II", "Database Design", "Advanced Single LAN Concept", "Graphic User Interface", 
		"Computer Security", "Object Oriented Programming in Java", "XML Data Representation", "Object Oriented Programming",
		"Design of Distributed Databases", "Interconnectivity", "Distributed Application Processing", "Network Security",
		"Advanced Object Oriented Programming in Java", "Web Services", "Data Warehousing", "Software Development Methodologies", 
		"LAN Internet Connection", "ClientServer Technology", "Installing and Maintaining Web Servers", "Advanced Security Technology", 
		"Dynamic Web Development: Servlets and JSP", "Database Administration"*/

		setListAdapter(new ArrayAdapter<String>(this,
				R.layout.listview,R.id.travel, chapterList));
		
		
	}

	protected void onListItemClick(ListView l, View v, int position, long id){
		
		switch(position){
		
		case 0:   // CH1-3
			i.putExtra("stringkey","algorithm: sequence of steps that solve a problem\n\uE041\uE042\uE012\nclass: blueprint for objects in Alice gallery\n\uE041\uE042\uE012\ndebugging: finding/fixing program error\n\uE041\uE042\uE012\nflow: series of steps that precisely specify, in order, behavior of each object in story\n\uE041\uE042\uE012\nfunction: message sent to object to get information (proximity, point of view, etc.)\n\uE041\uE042\uE012\nmessage: asks object to produce desired behavior\n\uE041\uE042\uE012\nmethod: behavior-producing message (turn, roll, etc.)\n\uE041\uE042\uE012\nobject: thing seen in world window (Alice, rabbit, etc.)\n\uE041\uE042\uE012\norientation: combined yaw, pitch, and roll\n\uE041\uE042\uE012\npoint of view: combined position and orientation\n\uE041\uE042\uE012\nposition: location by 3 axes, lr, ud, fb\n\uE041\uE042\uE012\nproperty: object characteristic\n\uE041\uE042\uE012\nsoftware design: properties, methods, functions\n\uE041\uE042\uE012\nsoftware engineering: changing software design\n\uE041\uE042\uE012\nsoftware testing: testing objects in world for viability\n\uE041\uE042\uE012\nstatement: action assigned to object\n\uE041\uE042\uE012\nstoryboard sketches: sketches of shots that show position, orientation, pose\n\uE041\uE042\uE012\nuser story: prose-style description of software's actions from view of software user; nouns correspond to objects, verbs to actions, actions written in order\n\uE041\uE042\uE012\ntransition diagram: shows storyboard-sketches and special events required to make transition from one sketch to next\n\uE041\uE042\uE012\npose: positions of available limbs\n\uE041\uE042\uE012\ndivide and conquer: work on small problems to solve big problem\n\uE041\uE042\uE012\nworld method: method stored in world\n\uE041\uE042\uE012\nscene: one part of a story\n\uE041\uE042\uE012\nshot: part of a scene - camera angle of set with respective characters\n\uE041\uE042\uE012\ndummy: invisible marker in world with position and orientation\n\uE041\uE042\uE012\nvariable name: that refers to a piece of the program's memory, in which a value can be stored, retrieved, and changed\n\uE041\uE042\uE012\nmethod variable: variable that allows us to store values within a method for later use\n\uE041\uE042\uE012\nparameter variable: variable that allows us to write more broadly useful methods\n\uE041\uE042\uE012\nlocal variable: another name for a method variable - it can only be accessed from within the method in which it is defined; it is local to the method\n\uE041\uE042\uE012\nnumber, for storing numeric values; Boolean, for storing logical values (true or false); object, for storing references to Alice objects (troll, wizard, etc.); and other, for storing strings, colors, sounds, and other similar values 4 basic data types\n\uE041\uE042\uE012\ntrial-and-error is tedious, and functions and variables can work for whatever properties the user changes of the objects reason to use functions and variable over trial-and-error\n\uE041\uE042\uE012\nWorld's functions pane: It is used so the user can input whatever values he or she wishes into the variable method location of ask user NumberDialog function; purpose\n\uE041\uE042\uE012\ntoString() function: World pane function used to convert the number value to a string value\n\uE041\uE042\uE012\nargument: value that we pass to an object via a message\n\uE041\uE042\uE012\nparameter: variable that stores an argument so that the receiver of the message can access it\n\uE041\uE042\uE012\nstring concatenation operator: + sign; puts things together in output\n\uE041\uE042\uE012\nproperty: instance variable other words for \"object variable\"\n\uE041\uE042\uE012\ndifference between object/method: an object contains several methods\n\uE041\uE042\uE012\nname, size, weight: examples of attributes\n\uE041\uE042\uE012\ncolor, opacity, vehicle, skinTexture, fillingStyle, pointOfView, isShowing: predefined property variables\n\uE041\uE042\uE012\ncolor: filter through which we see the object\n\uE041\uE042\uE012\nopacity: percentage of light the object reflects\n\uE041\uE042\uE012\nvehicle: what can move the object\n\uE041\uE042\uE012\nskinTexture: graphical appearance of object\n\uE041\uE042\uE012\nfillingStyle: how much of the object is drawn\n\uE041\uE042\uE012\npointOfView: object's position and orientation\n\uE041\uE042\uE012\nisShowing: whether or not object is visible\n\uE041\uE042\uE012\nsynchronizing: two objects making one move with the other that moves\n\uE041\uE042\uE012\nmethods are behavior-producing messages; functions are messages sent to objects to get information; methods are what objects do; functions are basic informational pieces difference between functions/methods\n\uE041\uE042\uE012\nCreate a Function: Select object in the object tree; click the functions tab in the details area; click \"create new function\"; enter name and type of value steps to define new function\n\uE041\uE042\uE012\nconcatenation: combining two strings a and b into a single string\n\uE041\uE042\uE012\nvariable name: noun that describes value it stores\n\uE041\uE042\uE012\nfunction: messages sent to objects to get information; basic informational pieces\n\uE041\uE042\uE012\ninitial value: value variable will contain when method begins, usually 0 or 1\n\uE041\uE042\uE012\nproperty variable: provides a place for us to store an attribute of an object\n\uE041\uE042\uE012\nplaceholder value: used as a temporary argument\n\uE041\uE042\uE012\naxis: pair of opposite-facing arrows that represent a spatial dimension\n\uE041\uE042\uE012\nreusable object: object that can be used in multiple worlds\n\uE041\uE042\uE012\norientation: direction an object is facing\n\uE041\uE042\uE012\nposition object's location in world\n\uE041\uE042\uE012\ncomment: explanatory statement not compiled by Alice");
			startActivityForResult(i, result);
			break;  
		
		case 1:   //  CH4
			i.putExtra("stringkey","Boolean type: a variable with two possible values\u2014true and false. It is useful when the program needs to \"make decisions.\"\n\uE041\uE042\uE012\nindefinite loop: a loop used when the number of repetitions is unknown\u2014the while loop, which runs as long as a certain Boolean condition is true.\n\uE041\uE042\uE012\nBoolean expressions: any expression which returns a Boolean value (e.g. 5 >= 6).\n\uE041\uE042\uE012\ninifinite loop: a loop that repeats forever.\n\uE041\uE042\uE012\nBoolean operators: operators which produce a Boolean value from two input values (e.g. val1 && val2).\n\uE041\uE042\uE012\nnested statement: statements placed inside one another\u2014for example, a for loop placed inside of another, in order to provide finer control.\n\uE041\uE042\uE012\nBoolean variables: a variable which stores a Boolean value (true or false).\n\uE041\uE042\uE012\nrelational operators: operator which tests relation between two values (e.g. val1 == val2).\n\uE041\uE042\uE012\ncondition: the Boolean value which is passed to an if statement and determines whether the code inside is run.\n\uE041\uE042\uE012\nrepetitive control: flow control which involves repetition of a task\u2014the for and while loops.\n\uE041\uE042\uE012\ncontrol structure: the order in which a program's statements run.\n\uE041\uE042\uE012\nselective control: a point where a program can select one of two courses to run based on a condition\u2014if statements.\n\uE041\uE042\uE012\ncounting loop: a loop that repeats a definite amount of times\u2014the for loop.\n\uE041\uE042\uE012\nselective flow: the flow of a program where two courses are possible because of an if statement.\n\uE041\uE042\uE012\nflow control: control of the order in which a program runs statements.\n\uE041\uE042\uE012\nvalidating statement: checking whether a parameter is a valid input for a method \u2014i.e. no negative distances for a swim() function.\n\uE041\uE042\uE012\nflow diagram: a chart which uses arrows to indicate possible directions of flow.\n\uE041\uE042\uE012\nwait(): statement a statement which makes the program wait for a specified duration.\n\uE041\uE042\uE012\ngeneral loop: a loop is a statement which allows for internal code to be repeated.\n\uE041\uE042\uE012\nwhile statement: an indefinite loop, which runs the internal code as long as a certain value remains on true.\n\uE041\uE042\uE012\nif-then-else logic: the logic of if and else statements: if the code inside the if is not run, then the code inside the else is.\n\uE041\uE042\uE012\nif statement: a statement which runs the inside code if a condition is met.");
			startActivityForResult(i, result);
			break;
		case 2:   // CH5
			i.putExtra("stringkey","interaction: giving directions to an object during run time through the keyboard, mouse or other input devise.\n\uE041\uE042\uE012\nevent: something that happens, such as a mouse click or keyboard stroke that calls code during the execution of a computer program\n\uE041\uE042\uE012\nevent handling: method a method that is called when the user does something such as a mouse click on an object or a keyboard press during the execution of a computer program\n\uE041\uE042\uE012\nincremental development: writing a method and then testing it; writing an additional method and then testing it\n\uE041\uE042\uE012\ndriver: a method that does very little other than organizing the calls to other methods\n\uE041\uE042\uE012\ninteractive interaction: between the computer application and the user\n\uE041\uE042\uE012\nkeyboard control: a keyboard stroke that is connected by coding an event.\n\uE041\uE042\uE012\nmouse control: a mouse click or mouse movement is connected by coding an event\n\uE041\uE042\uE012\ntesting: periodic checks that make sure what has been coded so far is working as expected\n\uE041\uE042\uE012\nparameter: a placeholder so that you can use the same method over and over with different values or objects.");
			startActivityForResult(i, result);
			break;
		case 3:   //  CH6
			i.putExtra("stringkey","Object-oriented Programming: Helps organise large programs by breaking down the coding into small manageable pieces\n\uE041\uE042\uE012\nClasses, objects and procedures: Are used in object-oriented programming as basic program components\n\uE041\uE042\uE012\nClass: A particular kind of object\n\uE041\uE042\uE012\nEvent: A mouse click or key press is used to trigger some action\n\uE041\uE042\uE012\nInstantiating: The action of creating and displaying an object from a class\n\uE041\uE042\uE012\nMethod: A coordinated sequence of instructions that will be carried out when requested\n\uE041\uE042\uE012\nAbstraction: The concept of thinking about an overall task instead of focusing on ll the small actions needed to complete the task\n\uE041\uE042\uE012\nParameter: Acting like a basket to receive information that is sent to a procedure\n\uE041\uE042\uE012\nWorld-level Procedure: Procedures that specifically reference more than one object\n\uE041\uE042\uE012\nClass-level Procedure: A benefit of this is the ability to inherit, once the procedure is written\n\uE041\uE042\uE012\n== Equal to\n\uE041\uE042\uE012\n> Greater than\n\uE041\uE042\uE012\n!= Not equal to\n\uE041\uE042\uE012\n>= Greater than or equal to\n\uE041\uE042\uE012\n<= Less than or equal to\n\uE041\uE042\uE012\n< Less than\n\uE041\uE042\uE012\nInteractive Program: A program where the user guides objects or makes things happen in the program by using a key-listener or mouse-listener\n\uE041\uE042\uE012\nDo in order: Makes a collection of instructions run sequentially\n\uE041\uE042\uE012\nDo together: Makes a collection of instructions run at the same time\n\uE041\uE042\uE012\nIf/else: Controls whether a block of instructions is executed or a procedure is called. Involves making a decision based on a current condition in the world.\n\uE041\uE042\uE012\nFunctions: Allows the user to ask questions about properties\n\uE041\uE042\uE012\nProperties: Information about a world and its objects are stored here\n\uE041\uE042\uE012\nAssignment operator =\n\uE041\uE042\uE012\nChecking operator ==\n\nargument: data needed by the method or function\n\uE041\uE042\uE012\nControl structures: if/else, do in order, do together\n\uE041\uE042\uE012\nboolean: true or false\n\uE041\uE042\uE012\nBoolean condition: evaluates to true or false");
			startActivityForResult(i, result);
			break;
		case 4:   //  CH7
			i.putExtra("stringkey","definite: an exact amount of times a block will repeat\n\uE041\uE042\uE012\ncount: how many imes a loop repeats\n\uE041\uE042\uE012\ncounted loop: a loop statement with a definite count\n\uE041\uE042\uE012\nindefinite: a non-exact amount of times a block will repeat\n\uE041\uE042\uE012\nconditional loop: a while statement\n\uE041\uE042\uE012\ninfinite loop: a never-ending loop\n\uE041\uE042\uE012\nBegin-During-End block: what to do at the beginning of when something become true, what to do while it is true, and what to do after it is true");
			startActivityForResult(i, result);
			break;
		case 5:   //  CH8
			i.putExtra("stringkey", "API (application-programming interface): a group of pre-defined classes that can be used to build a program. The Java API organizes Java's classes by package.\n\uE041\uE042\uE012\nassignment operator: the equals sign (=).\n\uE041\uE042\uE012\nassignment statement: statement that assigns a value to a variable.\n\uE041\uE042\uE012\nbase-2: a number system based on the two digits 0 and 1.\n\uE041\uE042\uE012\nbinary number: a number made up of some pattern of 0s and 1s.\n\uE041\uE042\uE012\nbit: the smallest unit of memory, which can store a value of 0 or 1.\n\uE041\uE042\uE012\nboolean: a type that stores a logical value of true (1) or false (0).\n\uE041\uE042\uE012\nboolean operator: another term for a logical operator.\n\uE041\uE042\uE012\nbyte: a type that is made up of 8 bits.\n\uE041\uE042\uE012\nchar: a type used to store character values.\n\uE041\uE042\uE012\ndecrement: an operation that subtracts 1 from the value of a variable.\n\uE041\uE042\uE012\ndouble expression: an expression that produces a double value.\n\uE041\uE042\uE012\nescape sequence: a backslash followed by one or more additional characters.\n\uE041\uE042\uE012\nexpression: a series of operands, operators, objects, and/or messages that combine to produce a value.\n\uE041\uE042\uE012\nfixed-point literals: a number with a fixed decimal point; e.g., -1.5 and 3.5.\n\uE041\uE042\uE012\nfloat: a type that uses 32 bits to represent a real number. A float type has less capacity than a double type.\n\uE041\uE042\uE012\ngarbage collector: a Java component that reclaims de-referenced handles.\n\uE041\uE042\uE012\nincrement: an operation that adds one to the value of a variable.\n\uE041\uE042\uE012\ninstance method: a message that must be sent to an instance of a class.\n\uE041\uE042\uE012\nint: type that uses 32 bits to store integer values.\n\uE041\uE042\uE012\nintegers: the set of whole numbers = {...-3, -2, -1, 0, 1, 2, 3...}.\n\uE041\uE042\uE012\nleft associativity: rule that orders from the left operations that include multiple operators from the same precedence level.\n\uE041\uE042\uE012\nliteral: a particular value of any type; e.g., 'a', 1.2, and 5 are literals, respectively, of type char, double, and int.\n\uE041\uE042\uE012\nlogical expression: an expression that evaluates to boolean true or false.\n\uE041\uE042\uE012\nlogical operator: one of three operators used to compare boolean expressions. The list of logical operators includes &&, ||, and !.\n\uE041\uE042\uE012\nlong: a type that uses 64 bits to store integer values. A long type has greater capacity than an int type or short type.\n\uE041\uE042\uE012\nMath class: a set of mathematical functions used to build complex expressions.\n\uE041\uE042\uE012\nnull: a value that indicates no particular object is being referenced.\n\uE041\uE042\uE012\nobject: an instance of a class.\n\uE041\uE042\uE012\noperator associativity: rules determining the order in which operations of the same precedence are performed.\n\uE041\uE042\uE012\noperator precedence: rank of an operator according to its precedence level.\n\uE041\uE042\uE012\noverloaded: a term applied to a method name that has multiple meanings within a class.\n\uE041\uE042\uE012\nprecedence level: priority assigned to an operator.\n\uE041\uE042\uE012\nquotient: a whole number representing the number of times a dividend can be segmented into units equal to the divisor.\n\uE041\uE042\uE012\nread-only: items an item, such as a constant, whose value can be read but not changed at run-time.\n\uE041\uE042\uE012\nreal number: a number that includes values to the left and right of a decimal point.\n\uE041\uE042\uE012\nremainder: a portion of the divisor that is left over after an integer division operation.\n\uE041\uE042\uE012\nright associativity: rule that orders from the right operations that include multiple operators from the same precedence level.\n\uE041\uE042\uE012\nScanner: class used to create objects that can read primitive type values from the keyboard.\n\uE041\uE042\uE012\nshort: a type that uses 16 bits to store integer values. A short type has less capacity than an int type or long type.\n\uE041\uE042\uE012\ntruth table: a table showing the value produced by a logical operator for each possible combination of operands.");
			startActivityForResult(i, result);
			break;
		
		}  
		
	}

	}


